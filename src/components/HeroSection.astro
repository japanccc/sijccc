---
// src/components/HeroSection.astro
import { Image } from "astro:assets";

// Import images directly - in Astro, you need to import images to use them with the Image component
import backgroundImage from "../assets/images/vertical-line-bg-small.svg";
import decorativeImage from "../assets/images/demo-elearning-01.png";
import heroImage from "../assets/images/demo-elearning-hero-banner-02.png";
---

<section
  class="p-0 overflow-hidden bg-dark-gray full-screen ipad-top-space-margin md-h-auto position-relative md-pb-70px sm-pb-40px cover-background bg-cornflower-blue"
>
  <div
    class="background-position-center-top h-100 w-100 position-absolute left-0px top-0"
    style={`background-image: url(${backgroundImage.src})`}
  >
  </div>

  <!-- Particles background - replaced with simpler version -->
  <div
    id="particles-container"
    class="h-100 position-absolute left-0px top-0 w-100"
  >
  </div>

  <div class="position-absolute left-minus-80px top-25">
    <Image
      src={decorativeImage}
      alt="Decorative element"
      class="parallax-element"
      width={decorativeImage.width}
      height={decorativeImage.height}
    />
  </div>

  <div class="container h-100">
    <div class="row align-items-center justify-content-center h-100">
      <!-- Hero content -->
      <div
        class="col-xl-5 col-lg-6 col-md-12 text-white text-center text-lg-start position-relative z-index-1 d-flex flex-column justify-content-center h-100 md-mt-50px md-mb-20px xs-mb-10px hero-text-content"
      >
        <span class="alt-font fs-75 lh-65 sm-fs-60 fw-500 mb-25px ls-minus-2px"
          >一生の友と、一生の成長を</span
        >
        <div
          class="mb-30px w-80 md-w-60 sm-w-100 d-block mx-auto mx-lg-0 overflow-hidden"
        >
          <span class="fs-18 fw-300 opacity-5 d-inline-block"
            >Online courses from the world's leading experts. Join 17 million
            learners today.</span
          >
        </div>
        <div class="overflow-hidden">
          <a
            href="/contact"
            class="btn btn-extra-large btn-base-color btn-rounded btn-switch-text fw-600 d-inline-block me-25px sm-me-10px align-middle left-icon"
          >
            <span>
              <span><i class="feather icon-feather-thumbs-up"></i></span>
              <span
                class="btn-double-text ls-minus-05px"
                data-text="Get started">Get started</span
              >
            </span>
          </a>
          <a
            href="https://www.youtube.com/watch?v=cfXHhfNy7tU"
            class="btn btn-link btn-hover-animation-switch btn-extra-large text-white popup-youtube btn-icon-left"
          >
            <span>
              <span class="btn-text">How it works</span>
              <span class="btn-icon"
                ><i class="feather icon-feather-youtube"></i></span
              >
              <span class="btn-icon"
                ><i class="feather icon-feather-youtube"></i></span
              >
            </span>
          </a>
        </div>

        <!-- Counter section -->
        <div
          class="row row-cols-3 justify-content-center counter-style-04 w-100 md-w-auto position-absolute lg-position-relative bottom-80px lg-bottom-0px lg-mt-50px"
        >
          <!-- Counter items -->
          <div class="col text-center text-lg-start">
            <h5
              class="counter-number d-inline-flex alt-font text-white fw-600 mb-10px"
              data-target="260"
              data-suffix="+"
            >
              0
            </h5>
            <div
              class="divider-style-03 divider-style-03-01 border-2 border-color-base-color mb-5px w-80 xs-w-90 md-mx-auto"
            >
            </div>
            <span class="fw-300 text-white opacity-5">Tutors</span>
          </div>

          <div class="col text-center text-lg-start">
            <h5
              class="counter-number d-inline-flex alt-font text-white fw-600 mb-10px"
              data-target="5340"
              data-suffix="+"
            >
              0
            </h5>
            <div
              class="divider-style-03 divider-style-03-01 border-2 border-color-base-color mb-5px w-80 xs-w-90 md-mx-auto"
            >
            </div>
            <span class="fw-300 text-white opacity-5">Students</span>
          </div>

          <div class="col text-center text-lg-start">
            <h5
              class="counter-number d-inline-flex alt-font text-white fw-600 mb-10px"
              data-target="280"
              data-suffix="+"
            >
              0
            </h5>
            <div
              class="divider-style-03 divider-style-03-01 border-2 border-color-base-color mb-5px w-80 xs-w-90 md-mx-auto"
            >
            </div>
            <span class="fw-300 text-white opacity-5">Courses</span>
          </div>
        </div>
      </div>

      <!-- Hero image using modern approach instead of Atropos 3D effect -->
      <div class="col-xl-7 col-lg-6 pt-30px lg-pt-0">
        <div
          class="position-relative outside-box-right-10 md-outside-box-right-0 hero-image-container"
        >
          <div class="position-relative z-index-9 animation-float">
            <Image
              src={heroImage}
              alt="E-learning platform hero image"
              width={heroImage.width}
              height={heroImage.height}
              class="position-relative z-index-9"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Modern vanilla JavaScript counter animation
  document.addEventListener("DOMContentLoaded", () => {
    // Simple IntersectionObserver for animation triggers
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Animate hero text with staggered timing
            if (entry.target.classList.contains("hero-text-content")) {
              const elements = entry.target.children;
              Array.from(elements).forEach((el, index) => {
                setTimeout(() => {
                  el.style.opacity = "1";
                  el.style.transform = "translateY(0)";
                }, 100 * index);
              });
            }

            // Animate counters
            if (entry.target.classList.contains("counter-number")) {
              animateCounter(entry.target);
            }

            // Stop observing after animation
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    // Observe hero content for animations
    document.querySelectorAll(".hero-text-content").forEach((item) => {
      item.style.opacity = "0";
      item.style.transform = "translateY(30px)";
      item.style.transition = "opacity 0.6s ease, transform 0.6s ease";
      observer.observe(item);
    });

    // Observe counters
    document.querySelectorAll(".counter-number").forEach((counter) => {
      observer.observe(counter);
    });

    // Simple parallax effect for background elements
    const parallaxElements = document.querySelectorAll(".parallax-element");
    window.addEventListener("scroll", () => {
      const scrollY = window.scrollY;
      parallaxElements.forEach((element) => {
        element.style.transform = `translateY(${scrollY * 0.1}px)`;
      });
    });

    // Initialize simple particles background (replacing the complex particle.js)
    initializeParticles();
  });

  // Counter animation function
  function animateCounter(counterElement: any) {
    const target = parseInt(counterElement.dataset.target);
    const suffix = counterElement.dataset.suffix || "";
    const duration = 2000; // Animation duration in milliseconds
    const start = 0;
    const increment = Math.ceil(target / (duration / 16)); // Roughly 60fps

    let current = start;
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        clearInterval(timer);
        current = target;
      }
      counterElement.textContent = current + suffix;
    }, 16);
  }

  // Simple particles effect (much lighter than particles.js)
  function initializeParticles() {
    const container = document.getElementById("particles-container");
    if (!container) return;

    // Create canvas element
    const canvas = document.createElement("canvas");
    canvas.width = container.offsetWidth;
    canvas.height = container.offsetHeight;
    canvas.style.position = "absolute";
    canvas.style.left = "0";
    canvas.style.top = "0";
    container.appendChild(canvas);

    const ctx = canvas.getContext("2d");
    const particles: {
      x: number;
      y: number;
      radius: number;
      color: string;
      speedX: number;
      speedY: number;
    }[] = [];

    // Create particles
    for (let i = 0; i < 6; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 3 + 5,
        color: "#d5d52b",
        speedX: Math.random() * 0.5,
        speedY: Math.random() * 0.2 - 0.1,
      });
    }

    // Animation loop
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particles.forEach((particle) => {
        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.fill();

        // Move particle
        particle.x += particle.speedX;

        // Reset when out of bounds
        if (particle.x > canvas.width) {
          particle.x = 0;
        }
      });

      requestAnimationFrame(animate);
    }

    animate();

    // Handle window resize
    window.addEventListener("resize", () => {
      canvas.width = container.offsetWidth;
      canvas.height = container.offsetHeight;
    });
  }
</script>

<style>
  /* Add basic animation styles */
  .animation-float {
    animation: floatAnimation 4s ease-in-out infinite;
  }

  @keyframes floatAnimation {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
    100% {
      transform: translateY(0);
    }
  }

  /* Additional styles to ensure compatibility without jQuery */
  .hero-text-content > * {
    opacity: 0;
    transform: translateY(30px);
    transition:
      opacity 0.6s ease,
      transform 0.6s ease;
  }
</style>
